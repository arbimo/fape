

type Support with {
};

type Brick < Support  with{
	variable Location loc;
	predicate cemented();
};

type Location;

type Place < Location;

type Truck < Place ;

instance Place wall, cementMixer;


type Worker < Location with{
	variable Place at;
	predicate available();
};

predicate haveCement();

action prepareCement(Worker w){
	duration :in [4,5];
	[all] w.at == cementMixer;
	[end] haveCement == false :-> true;
	[end+1,end+19] haveCement == true;
	[end+20] haveCement == true :-> false;
	[all] w.available == true :-> true;
};

action goto(Worker w, Place p1, Place p2){
	duration := 3;
	[all]w.at == p1 :-> p2;
};

action pick(Worker w, Brick b, Truck t){
	duration :=1;
	[all] w.at == t;
	[end] b.loc == t :-> w;
	[all] w.available == true :-> false;
};

action putCementBrick(Worker w, Brick b){
	duration := 2;
	[all] haveCement == true;
	[all] w.at == wall;
	[all] w.available == true :-> true;
};

action place(Worker w, Brick b, Brick b1, Brick b2){
	duration :=3;
	[all] { 
		w.available == false :-> true;
		b.loc == w :-> wall;
	};
};

