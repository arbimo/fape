
type Location;
type NavLocation < Location;

type Robot < Location with {
  variable NavLocation location;
};

type Item with {
  variable Location location;
};

/* Depicts if a robot can move from a to b */
constant boolean reachable(NavLocation a, NavLocation b); 

/* Depicts if two robot can pass themselves objects from a to b */
constant boolean passable(NavLocation a, NavLocation b);

action Move(Robot r, NavLocation a, NavLocation b) {
  [all] { 
    r.location == a :-> b;
    reachable(a, b) == true;
  };
};

action Handover(Robot r1, Robot r2, Item i, NavLocation a, NavLocation b) {
  [all] {
    passable(a, b) == true;
    r1.location == a;
    r2.location == b;
    i.location == r1 :-> r2;
  };
};

action Pick(Robot r1, Item i, NavLocation a) {
  [all] {
    r1.location == a;
    i.location == a :-> r1;
  };
};

action Drop(Robot r1, Item i, NavLocation a) {
  [all] {
    r1.location == a;
    i.location == r1 :-> a;
  };
};
    
instance Item I;
instance Robot Ra, Rb, Rc, Rd;
instance NavLocation A0, A1, A2, 
                     B0, B1, B2,
                     C0, C1, C2,
                     D0, D1, D2;

[start] {
  passable(A0, B0) := true;
  passable(B0, B1) := true;
  passable(A1, B1) := true;
  passable(B1, A1) := true;
  passable(C2, D2) := true;
  passable(D2, C2) := true;
  passable(B1, D1) := true;
  passable(D1, B1) := true;

  reachable(A1,A2) := true;
  reachable(A2,A1) := true;
  reachable(A2,A0) := true;
  reachable(A0,A2) := true;
  reachable(C1,C2) := true;
  reachable(C2,C1) := true;
  reachable(B0,B2) := true;
  reachable(B2,B0) := true;
  reachable(B2,B1) := true;
  reachable(B1,B2) := true;
  reachable(D2,D0) := true;
  reachable(D0,D2) := true;
  reachable(D0,D1) := true;
  reachable(D1,D0) := true;
};


[start] {
  Ra.location := A0;
  Rb.location := B0;
  Rc.location := C0;
  Rd.location := D0;
  I.location := A0;
};

[end] {
  I.location == D0;
  Ra.location == A1;
};