
/** Possible locations for objects */
type Location;

/** Possible locations for robots */
type NavLocation < Location;

/** Robot type with a location */
type Robot < Location with {
  variable NavLocation location;
};

/** Item whose location can be either robots or NavLocations */
type Item with {
  variable Location location;
};

/* Depicts if a robot can move from a to b */
constant boolean navigable(NavLocation a, NavLocation b); 

/* Depicts if two robot can pass themselves objects from a to b */
constant boolean passable(NavLocation a, NavLocation b);

action Move(Robot r, NavLocation a, NavLocation b) {
  [all] { 
    r.location == a :-> b;
    navigable(a, b) == true;
  };
};

action Handover(Robot r1, Robot r2, Item i, NavLocation a, NavLocation b) {

  motivated;

  [all] {
    passable(a, b) == true;
    r1.location == a;
    r2.location == b;
    i.location == r1 :-> r2;
  };
};

action Pick(Robot r1, Item i, NavLocation a) {

  motivated;

  [all] {
    r1.location == a;
    i.location == a :-> r1;
  };
};

action Transport(Robot r1, Robot r2, NavLocation l1, NavLocation l2, Item i) {
  
  :decomposition{ ordered(
     Pick(r1, i, l1),
     Pass(r1, r2, i),
     Drop(r2, i, l2));
  };
};

action Pass(Robot r1, Robot r2, Item i) {
  :decomposition{
    constant NavLocation l1;
    constant NavLocation l2;
    Handover(r1, r2, i, l1, l2);
  };

  :decomposition{ 
    constant NavLocation l1;
    constant NavLocation l2;
    constant NavLocation l3;
    constant NavLocation l4;
    constant Robot r3;
    ordered(
      pass : Pass(r1, r3, i),
      handover : Handover(r3, r2, i, l1, l2));
    end(pass) < start(handover);
  };
};

action Drop(Robot r1, Item i, NavLocation a) {

  motivated;

  [all] {
    r1.location == a;
    i.location == r1 :-> a;
  };
};
     
instance Item I;
instance Robot Ra, Rb, Rc, Rd;

/** Locations: robots can navigate between locations with the same letter */
instance NavLocation A0, A1, A2, 
                     B0, B1, B2,
                     C0, C1, C2,
                     D0, D1, D2;

/** Description of the environment */
[start] {
  /** places where exchange between robots is possible */
  passable(A0, B0) := true;
  passable(B0, A0) := true;
  passable(B0, B1) := true;
  passable(B1, B0) := true;
  passable(A1, C1) := true;
  passable(C1, A1) := true;
  passable(C2, D2) := true;
  passable(D2, C2) := true;
  passable(B1, D1) := true;
  passable(D1, B1) := true;

  /** places where navigation is posible */
  navigable(A1,A2) := true;
  navigable(A2,A1) := true;
  navigable(A2,A0) := true;
  navigable(A0,A2) := true;
  navigable(C1,C2) := true;
  navigable(C2,C1) := true;
  navigable(C0,C2) := true;
  navigable(C2,C0) := true;
  navigable(B0,B2) := true;
  navigable(B2,B0) := true;
  navigable(B2,B1) := true;
  navigable(B1,B2) := true;
  navigable(D2,D0) := true;
  navigable(D0,D2) := true;
  navigable(D0,D1) := true;
  navigable(D1,D0) := true;
};


/** initial locations of robots and items */
[start] {
  Ra.location := A0;
  Rb.location := B0;
  Rc.location := C0;
  Rd.location := D0;
  I.location := A0;
};


/**************** Goals and root of hte HTN ********/

/** the item has to be in B1 and D0 at some point in the plan */
[all] contains {
  goalB1 : I.location == B1;
  goalD0 : I.location == D0;
};

/** the item must be in B1 before being in D0 */
end(goalB1) < start(goalD0);

/** Ra must be in A1 at the end of the plan */
[end] {
  Ra.location == A1;
};

/** Root of the initial HTN **/
action Seed() {

  :decomposition{
    constant Robot r1;
    constant Robot r2;
    Transport(r1, r2, A0, B1, I);
    constant Robot r4;
    constant Robot r3;
    Transport(r3, r4, B1, D0, I);
  };

}; 
